[project]
name = "cnert"
version = "0.9.2"
description = "Cnert is trying to be a simple API for creating TLS Certificates testing purposes."
authors = [{ name = "Maarten", email = "<ikmaarten@gmail.com>" }]
requires-python = "==3.12.*"
readme = "README.md"
license = "MIT"
keywords = [
    "certificate",
    "X.509",
    "TLS",
    "cryptography",
    "testing",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing :: Mocking",
    "Topic :: Software Development :: Testing",
]
dependencies = [
    "cryptography>=46.0.3",
    "idna>=3.11",
]
homepage = "https://github.com/maartenq/cnert"
documentation = "https://cnert.readthedocs.io/en/latest/"
repository = "https://github.com/maartenq/cnert"

[dependency-groups]
dev = [
    "coverage[toml]>=7.11.0",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "ruff>=0.14.1",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.22",
    "mkdocstrings[python]>=0.30.1",
]

[build-system]
requires = ["uv-build"]
build-backend = "uv_build"

[tool.coverage.run]
branch = true
source = ["cnert"]

[tool.coverage.report]
exclude_lines = [
    "\\# pragma: no cover\\b",
    "^\\s*raise AssertionError\\b",
    "^\\s*raise NotImplementedError\\b",
    "^\\s*return NotImplemented\\b",
]
skip_empty = true
show_missing = true

[tool.ruff]
target-version = "py39"
line-length = 79
fix = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "C90",  # mccabe
    "E",  # pycodestyle error
    "F",  # pyflakes
    "I",  # isort
    "PGH",  # pygrep-hooks
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM",# flake8-simplify
    "T10",# flake8-debugger
    "TRY",  # tryceratops
    "UP", # pyupgrade
    "W", # pycodestyle warning
    "YTT",  # flake8-2020
]
ignore = [
    "TRY003",   # raise-vanilla-args
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "S101",
]
"src/cnert/cli.py" = [
    "B008",
]

[tool.uv]
default-groups = [
    "dev",
    "docs",
]
